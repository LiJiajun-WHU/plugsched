diff --git a/scheduler/kernel/sched/mod/fair.c b/scheduler/kernel/sched/mod/fair.c
--- a/scheduler/kernel/sched/mod/fair.c
+++ b/scheduler/kernel/sched/mod/fair.c
@@ -700,6 +700,31 @@ static struct sched_entity *__pick_first_entity(struct cfs_rq *cfs_rq)
 return __node_2_se(left);
 }
 
+/*
+ * Pick next entity for EEVDF: select the task with earliest eligible deadline
+ */
+static struct sched_entity *pick_eevdf(struct cfs_rq *cfs_rq)
+{
+struct rb_node *node = cfs_rq->tasks_timeline.rb_leftmost;
+struct sched_entity *se = NULL, *best = NULL;
+u64 min_deadline = U64_MAX;
+
+while (node) {
+se = __node_2_se(node);
+u64 deadline = se->deadline;
+
+if (sched_feat(EEVDF_LATENCY_EXP)) {
+// Favor I/O bound tasks by reducing their effective deadline
+if (se->avg.util_avg < 200) {
+deadline -= (deadline - se->vruntime) / 4;
+}
+}
+
+if (deadline < min_deadline && entity_eligible(cfs_rq, se)) {
+min_deadline = deadline;
+best = se;
+}
+node = rb_next(node);
+}
+
+return best ? best : __pick_first_entity(cfs_rq);
+}
+
 static struct sched_entity *__pick_next_entity(struct sched_entity *se)
 {
 struct rb_node *next = rb_next(&se->run_node);
diff --git a/scheduler/kernel/sched/mod/features.h b/scheduler/kernel/sched/mod/features.h
--- a/scheduler/kernel/sched/mod/features.h
+++ b/scheduler/kernel/sched/mod/features.h
@@ -6,6 +6,12 @@
  */
 SCHED_FEAT(EEVDF_DEADLINE_EXP, false)
 
+/*
+ * EEVDF latency optimization
+ * Optimize EEVDF scheduling latency, favor I/O intensive tasks
+ */
+SCHED_FEAT(EEVDF_LATENCY_EXP, false)
+
 /*
  * Only give sleepers 50% of their service deficit. This allows
